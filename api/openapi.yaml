openapi: '3.1.0'
info:
  title: inventory
  summary: Inventory Management Application
  description: >
    **inventory** is simple *Inventory Management Application* built using `MERN` stack
    for an imaginary store
  version: 1.0.0
  contact:
    name: Manojna
    url: https://github.com/manojnakp/inventory-mern/issues
    email: manojna.gopher@gmail.com
  license:
    name: MIT License
    identifier: MIT
    url: https://spdx.org/licenses/MIT.html
servers:
  - url: '/'
    description: default value
paths:
  /users:
    summary: all users
    description: actions on collection of all users
    get:
      tags: [user]
      summary: fetch all
      description: list all the users present in `users` collection
      operationId: fetchAllUsers
      responses:
        '200':
          description: list of `User` objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security: []
    post:
      tags: [user]
      summary: new
      description: create new user in `users` collection
      operationId: newUser
      requestBody:
        description: payload should consist of name and password fields
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: user id of newly created user
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: '#/components/schemas/ObjectId'
        '400':
          $ref: '#/components/responses/BadRequest'
      security: []
  /users/{uid}:
    summary: one user
    description: actions on single user selected by `{uid}` parameter
    parameters:
      - name: uid
        in: path
        description: unique user id for querying a particular user
        required: true
        schema:
          $ref: '#/components/schemas/ObjectId'
    get:
      tags: [user]
      summary: fetch one
      description: list single user matched by `{uid}` parameter
      operationId: fetchUserById
      responses:
        '200':
          description: the requested `User` object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
      security: []
    patch:
      tags: [user]
      summary: update one
      description: update single user matched by `{uid}` parameter
      operationId: updateUserById
      requestBody:
        description: payload consists of name and password fields (both optional)
        required: true
        content:
          schema:
            $ref: '#/components/schemas/User'
      responses:
        '200':
          description: update of user details successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags: [user]
      summary: delete one
      description: delete one user matched by `{uid}` parameter
      operationId: deleteUserById
      responses:
        '200':
          description: delete of user successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /items:
    summary: all items
    description: actions on collection of all items
    get:
      tags: [item]
      summary: fetch all
      description: list all the items present in `items` collection
      operationId: fetchAllItems
      responses:
        '200':
          description: list of `User` objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
      security: []
    post:
      tags: [item]
      summary: new
      description: create new item in `items` collection
      operationId: newItem
      requestBody:
        description: payload should consist of entire schema of item object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: item id of newly created item
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: '#/components/schemas/ObjectId'
        '400':
          $ref: '#/components/responses/BadRequest'
      security: []
  /items/{itemid}:
    summary: one item
    description: actions on single item selected by `{itemid}` parameter
    parameters:
      - name: itemid
        in: path
        description: unique item id for querying a particular item
        required: true
        schema:
          $ref: '#/components/schemas/ObjectId'
    get:
      tags: [item]
      summary: fetch one
      description: list single item matched by `{itemid}` parameter
      operationId: fetchItemById
      responses:
        '200':
          description: the requested `User` object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/BadRequest'
      security: []
    patch:
      tags: [item]
      summary: update one
      description: update single item matched by `{itemid}` parameter
      operationId: updateItemById
      requestBody:
        description: payload consists of fields of item object optionally
        required: true
        content:
          schema:
            $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: update of item details successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags: [item]
      summary: delete one
      description: delete one item matched by `{itemid}` parameter
      operationId: deleteItemById
      responses:
        '200':
          description: delete of item successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /categories:
    summary: all categories
    description: actions on collection of all categories
    get:
      tags: [category]
      summary: fetch all
      description: list all the categories present in `categories` collection
      operationId: fetchAllCategories
      responses:
        '200':
          description: list of `Category` objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      security: []
    post:
      tags: [category]
      summary: new
      description: create new category in `categories` collection
      operationId: newCategory
      requestBody:
        description: payload should consist of entire schema of category object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: category id of newly created category
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    $ref: '#/components/schemas/ObjectId'
        '400':
          $ref: '#/components/responses/BadRequest'
      security: []
  /categories/{catid}:
    summary: one category
    description: actions on single category selected by `{catid}` parameter
    parameters:
      - name: catid
        in: path
        description: unique category id for querying a particular category
        required: true
        schema:
          $ref: '#/components/schemas/ObjectId'
    get:
      tags: [category]
      summary: fetch one
      description: list single category matched by `{catid}` parameter
      operationId: fetchCategoryById
      responses:
        '200':
          description: the requested `Category` object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
      security: []
    patch:
      tags: [category]
      summary: update one
      description: update single category matched by `{catid}` parameter
      operationId: updateCategoryById
      requestBody:
        description: payload consists of partially the fields of category object
        required: true
        content:
          schema:
            $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: update of category details successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    delete:
      tags: [category]
      summary: delete one
      description: delete one category matched by `{catid}` parameter
      operationId: deleteCategoryById
      responses:
        '200':
          description: delete of category successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
          description: username
        password:
          type: string
          minimum: 8
          maximum: 20
    Item:
      title: Item
      type: object
      required:
        - id
        - name
        - desc
        - category
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
          description: item name
        desc:
          type: string
          description: item description
        category:
          $ref: '#/components/schemas/Category'
    Category:
      title: Category
      type: object
      required:
        - id
        - name
        - items
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        name:
          type: string
          description: category name
        desc:
          type: string
          description: category description
        items:
          type: array
          items:
            $ref: '#/components/schemas/ObjectId'
    ObjectId:
      title: mongodb object id
      type: string
    OK:
      title: operation OK
      type: object
      required:
        - ok
      properties:
        ok:
          type: boolean
    Error:
      title: action error
      type: object
      required:
        - error
      properties:
        error:
          type: string
  responses:
    BadRequest:
      description: server cannot or will not process the request due to incorrect request message
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: client is not logged in, please login to continue accessing the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      description: use json web tokens in the `Authorization` header
      scheme: bearer
      bearerFormat: jwt
security:
  - bearerAuth: []
tags:
  - name: user
    x-displayName: User
    description: actions related to `users` collection
  - name: item
    x-displayName: Item
    description: actions related to `items` collection
  - name: category
    x-displayName: Category
    description: actions related to `categories` collection